
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


X = [[1, 2, 3], [4, 5, 6], [7, 8, 9], ...]
# Labels: e.g., success or failure (1 or 0)
y = [1, 0, 1, ...]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier()

clf.fit(X_train, y_train)

predictions = clf.predict(X_test)

accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

# Now, you can use the trained model for coaching
# For example, input new data (features) to get predictions
new_data = [[10, 11, 12], [13, 14, 15], ...]
coaching_predictions = clf.predict(new_data)

# Print coaching predictions
print("Coaching Predictions:")
for data_point, prediction in zip(new_data, coaching_predictions):
    print(f"Data: {data_point}, Prediction: {prediction}")
